// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.1
// source: social/social.proto

package social

import (
	context "context"
	common "github.com/mariapetrova3009/insta-backend/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialGraphService_Follow_FullMethodName   = "/insta.social.SocialGraphService/Follow"
	SocialGraphService_Unfollow_FullMethodName = "/insta.social.SocialGraphService/Unfollow"
)

// SocialGraphServiceClient is the client API for SocialGraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialGraphServiceClient interface {
	// Subscription
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	// Usubscribe
	Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type socialGraphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialGraphServiceClient(cc grpc.ClientConnInterface) SocialGraphServiceClient {
	return &socialGraphServiceClient{cc}
}

func (c *socialGraphServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, SocialGraphService_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialGraphServiceClient) Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SocialGraphService_Unfollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialGraphServiceServer is the server API for SocialGraphService service.
// All implementations must embed UnimplementedSocialGraphServiceServer
// for forward compatibility
type SocialGraphServiceServer interface {
	// Subscription
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	// Usubscribe
	Unfollow(context.Context, *FollowRequest) (*common.Empty, error)
	mustEmbedUnimplementedSocialGraphServiceServer()
}

// UnimplementedSocialGraphServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialGraphServiceServer struct {
}

func (UnimplementedSocialGraphServiceServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedSocialGraphServiceServer) Unfollow(context.Context, *FollowRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedSocialGraphServiceServer) mustEmbedUnimplementedSocialGraphServiceServer() {}

// UnsafeSocialGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialGraphServiceServer will
// result in compilation errors.
type UnsafeSocialGraphServiceServer interface {
	mustEmbedUnimplementedSocialGraphServiceServer()
}

func RegisterSocialGraphServiceServer(s grpc.ServiceRegistrar, srv SocialGraphServiceServer) {
	s.RegisterService(&SocialGraphService_ServiceDesc, srv)
}

func _SocialGraphService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialGraphService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialGraphService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialGraphServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialGraphService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialGraphServiceServer).Unfollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialGraphService_ServiceDesc is the grpc.ServiceDesc for SocialGraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialGraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "insta.social.SocialGraphService",
	HandlerType: (*SocialGraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _SocialGraphService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _SocialGraphService_Unfollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social/social.proto",
}

const (
	LikeService_Like_FullMethodName   = "/insta.social.LikeService/Like"
	LikeService_Unlike_FullMethodName = "/insta.social.LikeService/Unlike"
)

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LikeService_Like_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, LikeService_Unlike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations must embed UnimplementedLikeServiceServer
// for forward compatibility
type LikeServiceServer interface {
	Like(context.Context, *LikeRequest) (*common.Empty, error)
	Unlike(context.Context, *LikeRequest) (*common.Empty, error)
	mustEmbedUnimplementedLikeServiceServer()
}

// UnimplementedLikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLikeServiceServer struct {
}

func (UnimplementedLikeServiceServer) Like(context.Context, *LikeRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedLikeServiceServer) Unlike(context.Context, *LikeRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlike not implemented")
}
func (UnimplementedLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_Unlike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).Unlike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_Unlike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).Unlike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "insta.social.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _LikeService_Like_Handler,
		},
		{
			MethodName: "Unlike",
			Handler:    _LikeService_Unlike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "social/social.proto",
}
